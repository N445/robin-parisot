<?php

namespace App\Controller\Admin;

use App\Entity\Actuality;
use App\Service\Actuality\TypeEnum;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CodeEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\Field;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Filter\ChoiceFilter;
use EasyCorp\Bundle\EasyAdminBundle\Filter\EntityFilter;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use FOS\CKEditorBundle\Form\Type\CKEditorType;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Vich\UploaderBundle\Form\Type\VichImageType;

class ActualityCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Actuality::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud->setDefaultSort(['created_at' => 'DESC']);
        $crud->addFormTheme('@FOSCKEditor/Form/ckeditor_widget.html.twig');
        return parent::configureCrud($crud); // TODO: Change the autogenerated stub
    }

    #[Route('/upload-file', name: 'UPLOAD_FILE')]
    public function list(Request $request): Response
    {
        dump($request);
        return $this->json([]);
    }

    protected function getRedirectResponseAfterSave(AdminContext $context, string $action): RedirectResponse
    {
        $submitButtonName = $context->getRequest()->request->all()['ea']['newForm']['btn'];

        if ('saveAndViewDetail' === $submitButtonName) {
            $url = $this->container->get(AdminUrlGenerator::class)
                ->setAction(Action::EDIT)
                ->setEntityId($context->getEntity()->getPrimaryKeyValue())
                ->generateUrl();

            return $this->redirect($url);
        }
        if ('saveAndReturn' === $submitButtonName) {
            $url = $this->container->get(AdminUrlGenerator::class)
                ->setAction(Action::EDIT)
                ->setEntityId($context->getEntity()->getPrimaryKeyValue())
                ->generateUrl();

            return $this->redirect($url);
        }

        return parent::getRedirectResponseAfterSave($context, $action);
    }

    public function configureFilters(Filters $filters): Filters
    {
        return $filters
            ->add('title')
            ->add(ChoiceFilter::new('type')->setChoices([
                'Actualité' => TypeEnum::Actuality->name,
                'Snippet' => TypeEnum::Snippet->name,
                'Tutoriel' => TypeEnum::Tutorial->name,
            ])->canSelectMultiple())
            ->add(EntityFilter::new('main_tag')->canSelectMultiple())
            ->add('sub_tags')
            ->add('resume')
            ->add('content')
            ->add('created_at')
            ->add('edited_at');
    }

    public function configureActions(Actions $actions): Actions
    {
        $actions->add(Crud::PAGE_EDIT, Action::DELETE);
        $actions->add(Crud::PAGE_EDIT, Action::DETAIL);
        return parent::configureActions($actions); // TODO: Change the autogenerated stub
    }

    /**
     * @param EntityManagerInterface $entityManager
     * @param Actuality $entityInstance
     * @return void
     */
    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $entityInstance
            ->setEditedAt(new \DateTimeImmutable())
            ->setIsEdited(true);
        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            FormField::addTab('Base'),
            ImageField::new('imageName')->setBasePath('uploads/actualities')->hideOnForm(),
            TextField::new('title', 'Titre')->setColumns(3),
            ChoiceField::new('type', 'Type')->setColumns(3)->setChoices([
                'Actualité' => TypeEnum::Actuality->name,
                'Snippet' => TypeEnum::Snippet->name,
                'Tutoriel' => TypeEnum::Tutorial->name,
            ])->renderExpanded(),
            AssociationField::new('main_tag', 'Tag principal')->setColumns(3),
            AssociationField::new('sub_tags', 'Tags secondaires')->setColumns(3),
            TextareaField::new('resume', 'Résumé')->setColumns(3),
            Field::new('imageFile', 'Image')->setColumns(3)
                ->setFormType(VichImageType::class)
                ->onlyOnForms()
            ,
            DateTimeField::new('created_at', 'Créé le')->hideOnForm(),
            DateTimeField::new('edited_at', 'Modifié le')->hideOnForm(),
            FormField::addTab('Contenu'),
            TextEditorField::new('content', 'Contenu')->setColumns(12)->setFormType(CKEditorType::class)
        ];
    }
}
